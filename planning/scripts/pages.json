[{"name":"abstract fun apply(action: Operator): Sequence<State>","description":"core.State.apply","location":"planning/core/-state/apply.html","searchKeys":["apply","abstract fun apply(action: Operator): Sequence<State>","core.State.apply"]},{"name":"abstract fun apply(substitution: VariableAssignment): Self","description":"core.Applicable.apply","location":"planning/core/-applicable/apply.html","searchKeys":["apply","abstract fun apply(substitution: VariableAssignment): Self","core.Applicable.apply"]},{"name":"abstract fun isApplicable(action: Action): Boolean","description":"core.State.isApplicable","location":"planning/core/-state/is-applicable.html","searchKeys":["isApplicable","abstract fun isApplicable(action: Action): Boolean","core.State.isApplicable"]},{"name":"abstract fun isSatisfiedBy(state: State): Boolean","description":"core.Goal.isSatisfiedBy","location":"planning/core/-goal/is-satisfied-by.html","searchKeys":["isSatisfiedBy","abstract fun isSatisfiedBy(state: State): Boolean","core.Goal.isSatisfiedBy"]},{"name":"abstract fun match(other: Fluent): Boolean","description":"core.Fluent.match","location":"planning/core/-fluent/match.html","searchKeys":["match","abstract fun match(other: Fluent): Boolean","core.Fluent.match"]},{"name":"abstract fun merge(other: VariableAssignment): VariableAssignment","description":"core.VariableAssignment.merge","location":"planning/core/-variable-assignment/merge.html","searchKeys":["merge","abstract fun merge(other: VariableAssignment): VariableAssignment","core.VariableAssignment.merge"]},{"name":"abstract fun mostGeneralUnifier(other: Fluent): VariableAssignment","description":"core.Fluent.mostGeneralUnifier","location":"planning/core/-fluent/most-general-unifier.html","searchKeys":["mostGeneralUnifier","abstract fun mostGeneralUnifier(other: Fluent): VariableAssignment","core.Fluent.mostGeneralUnifier"]},{"name":"abstract fun negate(): Fluent","description":"core.Fluent.negate","location":"planning/core/-fluent/negate.html","searchKeys":["negate","abstract fun negate(): Fluent","core.Fluent.negate"]},{"name":"abstract fun plan(problem: Problem): Sequence<Plan>","description":"core.Planner.plan","location":"planning/core/-planner/plan.html","searchKeys":["plan","abstract fun plan(problem: Problem): Sequence<Plan>","core.Planner.plan"]},{"name":"abstract fun refresh(scope: Context = Context.empty()): Self","description":"core.Applicable.refresh","location":"planning/core/-applicable/refresh.html","searchKeys":["refresh","abstract fun refresh(scope: Context = Context.empty()): Self","core.Applicable.refresh"]},{"name":"abstract override fun apply(substitution: VariableAssignment): Object","description":"core.Object.apply","location":"planning/core/-object/apply.html","searchKeys":["apply","abstract override fun apply(substitution: VariableAssignment): Object","core.Object.apply"]},{"name":"abstract override fun refresh(scope: Context): Object","description":"core.Object.refresh","location":"planning/core/-object/refresh.html","searchKeys":["refresh","abstract override fun refresh(scope: Context): Object","core.Object.refresh"]},{"name":"abstract override fun refresh(scope: Context): Variable","description":"core.Variable.refresh","location":"planning/core/-variable/refresh.html","searchKeys":["refresh","abstract override fun refresh(scope: Context): Variable","core.Variable.refresh"]},{"name":"abstract val actions: Set<Action>","description":"core.Domain.actions","location":"planning/core/-domain/actions.html","searchKeys":["actions","abstract val actions: Set<Action>","core.Domain.actions"]},{"name":"abstract val args: List<Value>","description":"core.Fluent.args","location":"planning/core/-fluent/args.html","searchKeys":["args","abstract val args: List<Value>","core.Fluent.args"]},{"name":"abstract val args: List<Value>","description":"core.Operator.args","location":"planning/core/-operator/args.html","searchKeys":["args","abstract val args: List<Value>","core.Operator.args"]},{"name":"abstract val arguments: List<Type>","description":"core.Predicate.arguments","location":"planning/core/-predicate/arguments.html","searchKeys":["arguments","abstract val arguments: List<Type>","core.Predicate.arguments"]},{"name":"abstract val axioms: Axiom?","description":"core.Domain.axioms","location":"planning/core/-domain/axioms.html","searchKeys":["axioms","abstract val axioms: Axiom?","core.Domain.axioms"]},{"name":"abstract val context: Expression","description":"core.Axiom.context","location":"planning/core/-axiom/context.html","searchKeys":["context","abstract val context: Expression","core.Axiom.context"]},{"name":"abstract val domain: Domain","description":"core.Problem.domain","location":"planning/core/-problem/domain.html","searchKeys":["domain","abstract val domain: Domain","core.Problem.domain"]},{"name":"abstract val effects: Set<Effect>","description":"core.Action.effects","location":"planning/core/-action/effects.html","searchKeys":["effects","abstract val effects: Set<Effect>","core.Action.effects"]},{"name":"abstract val expression1: Expression","description":"core.BinaryExpression.expression1","location":"planning/core/-binary-expression/expression1.html","searchKeys":["expression1","abstract val expression1: Expression","core.BinaryExpression.expression1"]},{"name":"abstract val expression2: Expression","description":"core.BinaryExpression.expression2","location":"planning/core/-binary-expression/expression2.html","searchKeys":["expression2","abstract val expression2: Expression","core.BinaryExpression.expression2"]},{"name":"abstract val expression: Expression","description":"core.UnaryExpression.expression","location":"planning/core/-unary-expression/expression.html","searchKeys":["expression","abstract val expression: Expression","core.UnaryExpression.expression"]},{"name":"abstract val fluent: Fluent","description":"core.Effect.fluent","location":"planning/core/-effect/fluent.html","searchKeys":["fluent","abstract val fluent: Fluent","core.Effect.fluent"]},{"name":"abstract val fluents: Set<Fluent>","description":"core.State.fluents","location":"planning/core/-state/fluents.html","searchKeys":["fluents","abstract val fluents: Set<Fluent>","core.State.fluents"]},{"name":"abstract val goal: Goal","description":"core.Problem.goal","location":"planning/core/-problem/goal.html","searchKeys":["goal","abstract val goal: Goal","core.Problem.goal"]},{"name":"abstract val implies: Expression","description":"core.Axiom.implies","location":"planning/core/-axiom/implies.html","searchKeys":["implies","abstract val implies: Expression","core.Axiom.implies"]},{"name":"abstract val initialState: State","description":"core.Problem.initialState","location":"planning/core/-problem/initial-state.html","searchKeys":["initialState","abstract val initialState: State","core.Problem.initialState"]},{"name":"abstract val instanceOf: Predicate","description":"core.Fluent.instanceOf","location":"planning/core/-fluent/instance-of.html","searchKeys":["instanceOf","abstract val instanceOf: Predicate","core.Fluent.instanceOf"]},{"name":"abstract val isGround: Boolean","description":"core.Fluent.isGround","location":"planning/core/-fluent/is-ground.html","searchKeys":["isGround","abstract val isGround: Boolean","core.Fluent.isGround"]},{"name":"abstract val isGround: Boolean","description":"core.Value.isGround","location":"planning/core/-value/is-ground.html","searchKeys":["isGround","abstract val isGround: Boolean","core.Value.isGround"]},{"name":"abstract val isNegated: Boolean","description":"core.Fluent.isNegated","location":"planning/core/-fluent/is-negated.html","searchKeys":["isNegated","abstract val isNegated: Boolean","core.Fluent.isNegated"]},{"name":"abstract val isPositive: Boolean","description":"core.Effect.isPositive","location":"planning/core/-effect/is-positive.html","searchKeys":["isPositive","abstract val isPositive: Boolean","core.Effect.isPositive"]},{"name":"abstract val name: String","description":"core.Action.name","location":"planning/core/-action/name.html","searchKeys":["name","abstract val name: String","core.Action.name"]},{"name":"abstract val name: String","description":"core.Domain.name","location":"planning/core/-domain/name.html","searchKeys":["name","abstract val name: String","core.Domain.name"]},{"name":"abstract val name: String","description":"core.Fluent.name","location":"planning/core/-fluent/name.html","searchKeys":["name","abstract val name: String","core.Fluent.name"]},{"name":"abstract val name: String","description":"core.Predicate.name","location":"planning/core/-predicate/name.html","searchKeys":["name","abstract val name: String","core.Predicate.name"]},{"name":"abstract val name: String","description":"core.Type.name","location":"planning/core/-type/name.html","searchKeys":["name","abstract val name: String","core.Type.name"]},{"name":"abstract val name: String","description":"core.Variable.name","location":"planning/core/-variable/name.html","searchKeys":["name","abstract val name: String","core.Variable.name"]},{"name":"abstract val negativeEffects: Set<Effect>","description":"core.Action.negativeEffects","location":"planning/core/-action/negative-effects.html","searchKeys":["negativeEffects","abstract val negativeEffects: Set<Effect>","core.Action.negativeEffects"]},{"name":"abstract val objects: ObjectSet","description":"core.Problem.objects","location":"planning/core/-problem/objects.html","searchKeys":["objects","abstract val objects: ObjectSet","core.Problem.objects"]},{"name":"abstract val operand: String","description":"core.BinaryExpression.operand","location":"planning/core/-binary-expression/operand.html","searchKeys":["operand","abstract val operand: String","core.BinaryExpression.operand"]},{"name":"abstract val operand: String","description":"core.UnaryExpression.operand","location":"planning/core/-unary-expression/operand.html","searchKeys":["operand","abstract val operand: String","core.UnaryExpression.operand"]},{"name":"abstract val operators: List<Operator>","description":"core.Plan.operators","location":"planning/core/-plan/operators.html","searchKeys":["operators","abstract val operators: List<Operator>","core.Plan.operators"]},{"name":"abstract val parameters: Map<Variable, Type>","description":"core.Action.parameters","location":"planning/core/-action/parameters.html","searchKeys":["parameters","abstract val parameters: Map<Variable, Type>","core.Action.parameters"]},{"name":"abstract val parameters: Map<Variable, Type>","description":"core.Axiom.parameters","location":"planning/core/-axiom/parameters.html","searchKeys":["parameters","abstract val parameters: Map<Variable, Type>","core.Axiom.parameters"]},{"name":"abstract val positiveEffects: Set<Effect>","description":"core.Action.positiveEffects","location":"planning/core/-action/positive-effects.html","searchKeys":["positiveEffects","abstract val positiveEffects: Set<Effect>","core.Action.positiveEffects"]},{"name":"abstract val preconditions: Set<Fluent>","description":"core.Action.preconditions","location":"planning/core/-action/preconditions.html","searchKeys":["preconditions","abstract val preconditions: Set<Fluent>","core.Action.preconditions"]},{"name":"abstract val predicates: Set<Predicate>","description":"core.Domain.predicates","location":"planning/core/-domain/predicates.html","searchKeys":["predicates","abstract val predicates: Set<Predicate>","core.Domain.predicates"]},{"name":"abstract val representation: String","description":"core.Object.representation","location":"planning/core/-object/representation.html","searchKeys":["representation","abstract val representation: String","core.Object.representation"]},{"name":"abstract val superType: Type?","description":"core.Type.superType","location":"planning/core/-type/super-type.html","searchKeys":["superType","abstract val superType: Type?","core.Type.superType"]},{"name":"abstract val targets: Set<Fluent>","description":"core.FluentBasedGoal.targets","location":"planning/core/-fluent-based-goal/targets.html","searchKeys":["targets","abstract val targets: Set<Fluent>","core.FluentBasedGoal.targets"]},{"name":"abstract val types: Set<Type>","description":"core.Domain.types","location":"planning/core/-domain/types.html","searchKeys":["types","abstract val types: Set<Type>","core.Domain.types"]},{"name":"abstract var map: Map<Type, Set<Object>>","description":"core.ObjectSet.map","location":"planning/core/-object-set/map.html","searchKeys":["map","abstract var map: Map<Type, Set<Object>>","core.ObjectSet.map"]},{"name":"class ContextImpl(delegate: Scope) : Context","description":"core.impl.ContextImpl","location":"planning/core.impl/-context-impl/index.html","searchKeys":["ContextImpl","class ContextImpl(delegate: Scope) : Context","core.impl.ContextImpl"]},{"name":"class NotUnifiableException constructor(val first: Any, val second: Any, cause: Throwable? = null) : Exception","description":"core.NotUnifiableException","location":"planning/core/-not-unifiable-exception/index.html","searchKeys":["NotUnifiableException","class NotUnifiableException constructor(val first: Any, val second: Any, cause: Throwable? = null) : Exception","core.NotUnifiableException"]},{"name":"data class VariableAssignmentImpl(delegate: Substitution) : VariableAssignment","description":"core.impl.VariableAssignmentImpl","location":"planning/core.impl/-variable-assignment-impl/index.html","searchKeys":["VariableAssignmentImpl","data class VariableAssignmentImpl(delegate: Substitution) : VariableAssignment","core.impl.VariableAssignmentImpl"]},{"name":"fun ContextImpl(delegate: Scope)","description":"core.impl.ContextImpl.ContextImpl","location":"planning/core.impl/-context-impl/-context-impl.html","searchKeys":["ContextImpl","fun ContextImpl(delegate: Scope)","core.impl.ContextImpl.ContextImpl"]},{"name":"fun NotUnifiableException(first: Any, second: Any, cause: Throwable? = null)","description":"core.NotUnifiableException.NotUnifiableException","location":"planning/core/-not-unifiable-exception/-not-unifiable-exception.html","searchKeys":["NotUnifiableException","fun NotUnifiableException(first: Any, second: Any, cause: Throwable? = null)","core.NotUnifiableException.NotUnifiableException"]},{"name":"fun VariableAssignmentImpl(delegate: Substitution)","description":"core.impl.VariableAssignmentImpl.VariableAssignmentImpl","location":"planning/core.impl/-variable-assignment-impl/-variable-assignment-impl.html","searchKeys":["VariableAssignmentImpl","fun VariableAssignmentImpl(delegate: Substitution)","core.impl.VariableAssignmentImpl.VariableAssignmentImpl"]},{"name":"fun VariableAssignmentImpl(variable: Variable, value: Value)","description":"core.impl.VariableAssignmentImpl.VariableAssignmentImpl","location":"planning/core.impl/-variable-assignment-impl/-variable-assignment-impl.html","searchKeys":["VariableAssignmentImpl","fun VariableAssignmentImpl(variable: Variable, value: Value)","core.impl.VariableAssignmentImpl.VariableAssignmentImpl"]},{"name":"fun empty(): Context","description":"core.impl.Context.Companion.empty","location":"planning/core.impl/-context/-companion/empty.html","searchKeys":["empty","fun empty(): Context","core.impl.Context.Companion.empty"]},{"name":"fun empty(): VariableAssignment","description":"core.VariableAssignment.Companion.empty","location":"planning/core/-variable-assignment/-companion/empty.html","searchKeys":["empty","fun empty(): VariableAssignment","core.VariableAssignment.Companion.empty"]},{"name":"fun finalStateComplaintWithGoal(goal: FluentBasedGoal, currentState: State): Boolean","description":"core.utility.finalStateComplaintWithGoal","location":"planning/core.utility/final-state-complaint-with-goal.html","searchKeys":["finalStateComplaintWithGoal","fun finalStateComplaintWithGoal(goal: FluentBasedGoal, currentState: State): Boolean","core.utility.finalStateComplaintWithGoal"]},{"name":"fun negative(fluent: Fluent): Effect","description":"core.Effect.Companion.negative","location":"planning/core/-effect/-companion/negative.html","searchKeys":["negative","fun negative(fluent: Fluent): Effect","core.Effect.Companion.negative"]},{"name":"fun negative(instanceOf: Predicate, vararg args: Value): Fluent","description":"core.Fluent.Companion.negative","location":"planning/core/-fluent/-companion/negative.html","searchKeys":["negative","fun negative(instanceOf: Predicate, vararg args: Value): Fluent","core.Fluent.Companion.negative"]},{"name":"fun of(action: Action): Operator","description":"core.Operator.Companion.of","location":"planning/core/-operator/-companion/of.html","searchKeys":["of","fun of(action: Action): Operator","core.Operator.Companion.of"]},{"name":"fun of(actions: List<Operator>): Plan","description":"core.Plan.Companion.of","location":"planning/core/-plan/-companion/of.html","searchKeys":["of","fun of(actions: List<Operator>): Plan","core.Plan.Companion.of"]},{"name":"fun of(domain: Domain, objects: ObjectSet, initialState: State, goal: Goal): Problem","description":"core.Problem.Companion.of","location":"planning/core/-problem/-companion/of.html","searchKeys":["of","fun of(domain: Domain, objects: ObjectSet, initialState: State, goal: Goal): Problem","core.Problem.Companion.of"]},{"name":"fun of(expression1: Expression, expression2: Expression, operand: String): BinaryExpression","description":"core.BinaryExpression.Companion.of","location":"planning/core/-binary-expression/-companion/of.html","searchKeys":["of","fun of(expression1: Expression, expression2: Expression, operand: String): BinaryExpression","core.BinaryExpression.Companion.of"]},{"name":"fun of(expression: Expression, operand: String): UnaryExpression","description":"core.UnaryExpression.Companion.of","location":"planning/core/-unary-expression/-companion/of.html","searchKeys":["of","fun of(expression: Expression, operand: String): UnaryExpression","core.UnaryExpression.Companion.of"]},{"name":"fun of(fluent: Fluent, isPositive: Boolean = true): Effect","description":"core.Effect.Companion.of","location":"planning/core/-effect/-companion/of.html","searchKeys":["of","fun of(fluent: Fluent, isPositive: Boolean = true): Effect","core.Effect.Companion.of"]},{"name":"fun of(fluents: Set<Fluent>): FluentBasedGoal","description":"core.FluentBasedGoal.Companion.of","location":"planning/core/-fluent-based-goal/-companion/of.html","searchKeys":["of","fun of(fluents: Set<Fluent>): FluentBasedGoal","core.FluentBasedGoal.Companion.of"]},{"name":"fun of(fluents: Set<Fluent>): State","description":"core.State.Companion.of","location":"planning/core/-state/-companion/of.html","searchKeys":["of","fun of(fluents: Set<Fluent>): State","core.State.Companion.of"]},{"name":"fun of(instanceOf: Predicate, isNegated: Boolean = false, args: List<Value>): Fluent","description":"core.Fluent.Companion.of","location":"planning/core/-fluent/-companion/of.html","searchKeys":["of","fun of(instanceOf: Predicate, isNegated: Boolean = false, args: List<Value>): Fluent","core.Fluent.Companion.of"]},{"name":"fun of(instanceOf: Predicate, isNegated: Boolean = false, vararg args: Value): Fluent","description":"core.Fluent.Companion.of","location":"planning/core/-fluent/-companion/of.html","searchKeys":["of","fun of(instanceOf: Predicate, isNegated: Boolean = false, vararg args: Value): Fluent","core.Fluent.Companion.of"]},{"name":"fun of(map: Map<Type, Set<Object>>): ObjectSet","description":"core.ObjectSet.Companion.of","location":"planning/core/-object-set/-companion/of.html","searchKeys":["of","fun of(map: Map<Type, Set<Object>>): ObjectSet","core.ObjectSet.Companion.of"]},{"name":"fun of(name: String): Variable","description":"core.Variable.Companion.of","location":"planning/core/-variable/-companion/of.html","searchKeys":["of","fun of(name: String): Variable","core.Variable.Companion.of"]},{"name":"fun of(name: String, arguments: List<Type>): Predicate","description":"core.Predicate.Companion.of","location":"planning/core/-predicate/-companion/of.html","searchKeys":["of","fun of(name: String, arguments: List<Type>): Predicate","core.Predicate.Companion.of"]},{"name":"fun of(name: String, parameters: Map<Variable, Type>, preconditions: Set<Fluent>, effects: Set<Effect>): Action","description":"core.Action.Companion.of","location":"planning/core/-action/-companion/of.html","searchKeys":["of","fun of(name: String, parameters: Map<Variable, Type>, preconditions: Set<Fluent>, effects: Set<Effect>): Action","core.Action.Companion.of"]},{"name":"fun of(name: String, predicates: Set<Predicate>, actions: Set<Action>, types: Set<Type>, axioms: Axiom? = null): Domain","description":"core.Domain.Companion.of","location":"planning/core/-domain/-companion/of.html","searchKeys":["of","fun of(name: String, predicates: Set<Predicate>, actions: Set<Action>, types: Set<Type>, axioms: Axiom? = null): Domain","core.Domain.Companion.of"]},{"name":"fun of(name: String, superType: Type? = null): Type","description":"core.Type.Companion.of","location":"planning/core/-type/-companion/of.html","searchKeys":["of","fun of(name: String, superType: Type? = null): Type","core.Type.Companion.of"]},{"name":"fun of(name: String, vararg arguments: Type): Predicate","description":"core.Predicate.Companion.of","location":"planning/core/-predicate/-companion/of.html","searchKeys":["of","fun of(name: String, vararg arguments: Type): Predicate","core.Predicate.Companion.of"]},{"name":"fun of(parameters: Map<Variable, Type>, context: Expression, implies: Expression): Axiom","description":"core.Axiom.Companion.of","location":"planning/core/-axiom/-companion/of.html","searchKeys":["of","fun of(parameters: Map<Variable, Type>, context: Expression, implies: Expression): Axiom","core.Axiom.Companion.of"]},{"name":"fun of(value: Double): Object","description":"core.Object.Companion.of","location":"planning/core/-object/-companion/of.html","searchKeys":["of","fun of(value: Double): Object","core.Object.Companion.of"]},{"name":"fun of(value: Int): Object","description":"core.Object.Companion.of","location":"planning/core/-object/-companion/of.html","searchKeys":["of","fun of(value: Int): Object","core.Object.Companion.of"]},{"name":"fun of(value: Long): Object","description":"core.Object.Companion.of","location":"planning/core/-object/-companion/of.html","searchKeys":["of","fun of(value: Long): Object","core.Object.Companion.of"]},{"name":"fun of(value: String): Object","description":"core.Object.Companion.of","location":"planning/core/-object/-companion/of.html","searchKeys":["of","fun of(value: String): Object","core.Object.Companion.of"]},{"name":"fun of(vararg fluents: Fluent): FluentBasedGoal","description":"core.FluentBasedGoal.Companion.of","location":"planning/core/-fluent-based-goal/-companion/of.html","searchKeys":["of","fun of(vararg fluents: Fluent): FluentBasedGoal","core.FluentBasedGoal.Companion.of"]},{"name":"fun of(vararg fluents: Fluent): State","description":"core.State.Companion.of","location":"planning/core/-state/-companion/of.html","searchKeys":["of","fun of(vararg fluents: Fluent): State","core.State.Companion.of"]},{"name":"fun of(vararg map: Pair<Type, Set<Object>>): ObjectSet","description":"core.ObjectSet.Companion.of","location":"planning/core/-object-set/-companion/of.html","searchKeys":["of","fun of(vararg map: Pair<Type, Set<Object>>): ObjectSet","core.ObjectSet.Companion.of"]},{"name":"fun of(vararg vars: String): ContextImpl","description":"core.impl.Context.Companion.of","location":"planning/core.impl/-context/-companion/of.html","searchKeys":["of","fun of(vararg vars: String): ContextImpl","core.impl.Context.Companion.of"]},{"name":"fun of(variable: Variable, value: Value): VariableAssignment","description":"core.VariableAssignment.Companion.of","location":"planning/core/-variable-assignment/-companion/of.html","searchKeys":["of","fun of(variable: Variable, value: Value): VariableAssignment","core.VariableAssignment.Companion.of"]},{"name":"fun positive(fluent: Fluent): Effect","description":"core.Effect.Companion.positive","location":"planning/core/-effect/-companion/positive.html","searchKeys":["positive","fun positive(fluent: Fluent): Effect","core.Effect.Companion.positive"]},{"name":"fun positive(instanceOf: Predicate, vararg args: Value): Fluent","description":"core.Fluent.Companion.positive","location":"planning/core/-fluent/-companion/positive.html","searchKeys":["positive","fun positive(instanceOf: Predicate, vararg args: Value): Fluent","core.Fluent.Companion.positive"]},{"name":"fun strips(): Planner","description":"core.Planner.Companion.strips","location":"planning/core/-planner/-companion/strips.html","searchKeys":["strips","fun strips(): Planner","core.Planner.Companion.strips"]},{"name":"infix fun <T> Boolean.then(param: T): T?","description":"core.utility.then","location":"planning/core.utility/then.html","searchKeys":["then","infix fun <T> Boolean.then(param: T): T?","core.utility.then"]},{"name":"interface Action","description":"core.Action","location":"planning/core/-action/index.html","searchKeys":["Action","interface Action","core.Action"]},{"name":"interface Applicable<Self : Applicable<Self>>","description":"core.Applicable","location":"planning/core/-applicable/index.html","searchKeys":["Applicable","interface Applicable<Self : Applicable<Self>>","core.Applicable"]},{"name":"interface Axiom","description":"core.Axiom","location":"planning/core/-axiom/index.html","searchKeys":["Axiom","interface Axiom","core.Axiom"]},{"name":"interface BinaryExpression : Expression","description":"core.BinaryExpression","location":"planning/core/-binary-expression/index.html","searchKeys":["BinaryExpression","interface BinaryExpression : Expression","core.BinaryExpression"]},{"name":"interface Context","description":"core.impl.Context","location":"planning/core.impl/-context/index.html","searchKeys":["Context","interface Context","core.impl.Context"]},{"name":"interface Domain","description":"core.Domain","location":"planning/core/-domain/index.html","searchKeys":["Domain","interface Domain","core.Domain"]},{"name":"interface Effect : Applicable<Effect> ","description":"core.Effect","location":"planning/core/-effect/index.html","searchKeys":["Effect","interface Effect : Applicable<Effect> ","core.Effect"]},{"name":"interface Expression","description":"core.Expression","location":"planning/core/-expression/index.html","searchKeys":["Expression","interface Expression","core.Expression"]},{"name":"interface Fluent : Applicable<Fluent> , Expression","description":"core.Fluent","location":"planning/core/-fluent/index.html","searchKeys":["Fluent","interface Fluent : Applicable<Fluent> , Expression","core.Fluent"]},{"name":"interface FluentBasedGoal : Goal, Applicable<FluentBasedGoal> ","description":"core.FluentBasedGoal","location":"planning/core/-fluent-based-goal/index.html","searchKeys":["FluentBasedGoal","interface FluentBasedGoal : Goal, Applicable<FluentBasedGoal> ","core.FluentBasedGoal"]},{"name":"interface Goal","description":"core.Goal","location":"planning/core/-goal/index.html","searchKeys":["Goal","interface Goal","core.Goal"]},{"name":"interface Object : Value","description":"core.Object","location":"planning/core/-object/index.html","searchKeys":["Object","interface Object : Value","core.Object"]},{"name":"interface ObjectSet","description":"core.ObjectSet","location":"planning/core/-object-set/index.html","searchKeys":["ObjectSet","interface ObjectSet","core.ObjectSet"]},{"name":"interface Operator : Applicable<Operator> , Action","description":"core.Operator","location":"planning/core/-operator/index.html","searchKeys":["Operator","interface Operator : Applicable<Operator> , Action","core.Operator"]},{"name":"interface Plan","description":"core.Plan","location":"planning/core/-plan/index.html","searchKeys":["Plan","interface Plan","core.Plan"]},{"name":"interface Planner","description":"core.Planner","location":"planning/core/-planner/index.html","searchKeys":["Planner","interface Planner","core.Planner"]},{"name":"interface Predicate","description":"core.Predicate","location":"planning/core/-predicate/index.html","searchKeys":["Predicate","interface Predicate","core.Predicate"]},{"name":"interface Problem","description":"core.Problem","location":"planning/core/-problem/index.html","searchKeys":["Problem","interface Problem","core.Problem"]},{"name":"interface State","description":"core.State","location":"planning/core/-state/index.html","searchKeys":["State","interface State","core.State"]},{"name":"interface Type","description":"core.Type","location":"planning/core/-type/index.html","searchKeys":["Type","interface Type","core.Type"]},{"name":"interface UnaryExpression : Expression","description":"core.UnaryExpression","location":"planning/core/-unary-expression/index.html","searchKeys":["UnaryExpression","interface UnaryExpression : Expression","core.UnaryExpression"]},{"name":"interface Value : Applicable<Value> ","description":"core.Value","location":"planning/core/-value/index.html","searchKeys":["Value","interface Value : Applicable<Value> ","core.Value"]},{"name":"interface Variable : Value","description":"core.Variable","location":"planning/core/-variable/index.html","searchKeys":["Variable","interface Variable : Value","core.Variable"]},{"name":"interface VariableAssignment : Map<Variable, Value> ","description":"core.VariableAssignment","location":"planning/core/-variable-assignment/index.html","searchKeys":["VariableAssignment","interface VariableAssignment : Map<Variable, Value> ","core.VariableAssignment"]},{"name":"object Companion","description":"core.Action.Companion","location":"planning/core/-action/-companion/index.html","searchKeys":["Companion","object Companion","core.Action.Companion"]},{"name":"object Companion","description":"core.Axiom.Companion","location":"planning/core/-axiom/-companion/index.html","searchKeys":["Companion","object Companion","core.Axiom.Companion"]},{"name":"object Companion","description":"core.BinaryExpression.Companion","location":"planning/core/-binary-expression/-companion/index.html","searchKeys":["Companion","object Companion","core.BinaryExpression.Companion"]},{"name":"object Companion","description":"core.Domain.Companion","location":"planning/core/-domain/-companion/index.html","searchKeys":["Companion","object Companion","core.Domain.Companion"]},{"name":"object Companion","description":"core.Effect.Companion","location":"planning/core/-effect/-companion/index.html","searchKeys":["Companion","object Companion","core.Effect.Companion"]},{"name":"object Companion","description":"core.Fluent.Companion","location":"planning/core/-fluent/-companion/index.html","searchKeys":["Companion","object Companion","core.Fluent.Companion"]},{"name":"object Companion","description":"core.FluentBasedGoal.Companion","location":"planning/core/-fluent-based-goal/-companion/index.html","searchKeys":["Companion","object Companion","core.FluentBasedGoal.Companion"]},{"name":"object Companion","description":"core.Object.Companion","location":"planning/core/-object/-companion/index.html","searchKeys":["Companion","object Companion","core.Object.Companion"]},{"name":"object Companion","description":"core.ObjectSet.Companion","location":"planning/core/-object-set/-companion/index.html","searchKeys":["Companion","object Companion","core.ObjectSet.Companion"]},{"name":"object Companion","description":"core.Operator.Companion","location":"planning/core/-operator/-companion/index.html","searchKeys":["Companion","object Companion","core.Operator.Companion"]},{"name":"object Companion","description":"core.Plan.Companion","location":"planning/core/-plan/-companion/index.html","searchKeys":["Companion","object Companion","core.Plan.Companion"]},{"name":"object Companion","description":"core.Planner.Companion","location":"planning/core/-planner/-companion/index.html","searchKeys":["Companion","object Companion","core.Planner.Companion"]},{"name":"object Companion","description":"core.Predicate.Companion","location":"planning/core/-predicate/-companion/index.html","searchKeys":["Companion","object Companion","core.Predicate.Companion"]},{"name":"object Companion","description":"core.Problem.Companion","location":"planning/core/-problem/-companion/index.html","searchKeys":["Companion","object Companion","core.Problem.Companion"]},{"name":"object Companion","description":"core.State.Companion","location":"planning/core/-state/-companion/index.html","searchKeys":["Companion","object Companion","core.State.Companion"]},{"name":"object Companion","description":"core.Type.Companion","location":"planning/core/-type/-companion/index.html","searchKeys":["Companion","object Companion","core.Type.Companion"]},{"name":"object Companion","description":"core.UnaryExpression.Companion","location":"planning/core/-unary-expression/-companion/index.html","searchKeys":["Companion","object Companion","core.UnaryExpression.Companion"]},{"name":"object Companion","description":"core.Variable.Companion","location":"planning/core/-variable/-companion/index.html","searchKeys":["Companion","object Companion","core.Variable.Companion"]},{"name":"object Companion","description":"core.VariableAssignment.Companion","location":"planning/core/-variable-assignment/-companion/index.html","searchKeys":["Companion","object Companion","core.VariableAssignment.Companion"]},{"name":"object Companion","description":"core.impl.Context.Companion","location":"planning/core.impl/-context/-companion/index.html","searchKeys":["Companion","object Companion","core.impl.Context.Companion"]},{"name":"open fun match(other: Effect): Boolean","description":"core.Effect.match","location":"planning/core/-effect/match.html","searchKeys":["match","open fun match(other: Effect): Boolean","core.Effect.match"]},{"name":"open fun mostGeneralUnifier(other: Effect): VariableAssignment","description":"core.Effect.mostGeneralUnifier","location":"planning/core/-effect/most-general-unifier.html","searchKeys":["mostGeneralUnifier","open fun mostGeneralUnifier(other: Effect): VariableAssignment","core.Effect.mostGeneralUnifier"]},{"name":"open infix fun and(other: Expression): Expression","description":"core.Expression.and","location":"planning/core/-expression/and.html","searchKeys":["and","open infix fun and(other: Expression): Expression","core.Expression.and"]},{"name":"open infix fun or(other: Expression): Expression","description":"core.Expression.or","location":"planning/core/-expression/or.html","searchKeys":["or","open infix fun or(other: Expression): Expression","core.Expression.or"]},{"name":"open operator fun not(): Expression","description":"core.Expression.not","location":"planning/core/-expression/not.html","searchKeys":["not","open operator fun not(): Expression","core.Expression.not"]},{"name":"open operator override fun get(key: Variable): Value","description":"core.impl.VariableAssignmentImpl.get","location":"planning/core.impl/-variable-assignment-impl/get.html","searchKeys":["get","open operator override fun get(key: Variable): Value","core.impl.VariableAssignmentImpl.get"]},{"name":"open override fun containsKey(key: Variable): Boolean","description":"core.impl.VariableAssignmentImpl.containsKey","location":"planning/core.impl/-variable-assignment-impl/contains-key.html","searchKeys":["containsKey","open override fun containsKey(key: Variable): Boolean","core.impl.VariableAssignmentImpl.containsKey"]},{"name":"open override fun containsValue(value: Value): Boolean","description":"core.impl.VariableAssignmentImpl.containsValue","location":"planning/core.impl/-variable-assignment-impl/contains-value.html","searchKeys":["containsValue","open override fun containsValue(value: Value): Boolean","core.impl.VariableAssignmentImpl.containsValue"]},{"name":"open override fun isEmpty(): Boolean","description":"core.impl.VariableAssignmentImpl.isEmpty","location":"planning/core.impl/-variable-assignment-impl/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","core.impl.VariableAssignmentImpl.isEmpty"]},{"name":"open override fun merge(other: VariableAssignment): VariableAssignment","description":"core.impl.VariableAssignmentImpl.merge","location":"planning/core.impl/-variable-assignment-impl/merge.html","searchKeys":["merge","open override fun merge(other: VariableAssignment): VariableAssignment","core.impl.VariableAssignmentImpl.merge"]},{"name":"open override val entries: Set<Map.Entry<Variable, Value>>","description":"core.impl.VariableAssignmentImpl.entries","location":"planning/core.impl/-variable-assignment-impl/entries.html","searchKeys":["entries","open override val entries: Set<Map.Entry<Variable, Value>>","core.impl.VariableAssignmentImpl.entries"]},{"name":"open override val keys: Set<Variable>","description":"core.impl.VariableAssignmentImpl.keys","location":"planning/core.impl/-variable-assignment-impl/keys.html","searchKeys":["keys","open override val keys: Set<Variable>","core.impl.VariableAssignmentImpl.keys"]},{"name":"open override val size: Int","description":"core.impl.VariableAssignmentImpl.size","location":"planning/core.impl/-variable-assignment-impl/size.html","searchKeys":["size","open override val size: Int","core.impl.VariableAssignmentImpl.size"]},{"name":"open override val values: Collection<Value>","description":"core.impl.VariableAssignmentImpl.values","location":"planning/core.impl/-variable-assignment-impl/values.html","searchKeys":["values","open override val values: Collection<Value>","core.impl.VariableAssignmentImpl.values"]},{"name":"val first: Any","description":"core.NotUnifiableException.first","location":"planning/core/-not-unifiable-exception/first.html","searchKeys":["first","val first: Any","core.NotUnifiableException.first"]},{"name":"val second: Any","description":"core.NotUnifiableException.second","location":"planning/core/-not-unifiable-exception/second.html","searchKeys":["second","val second: Any","core.NotUnifiableException.second"]}]
