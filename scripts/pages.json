[{"name":"abstract class BaseQuestion : Question","description":"explanation.impl.BaseQuestion","location":"explanation/explanation.impl/-base-question/index.html","searchKeys":["BaseQuestion","abstract class BaseQuestion : Question","explanation.impl.BaseQuestion"]},{"name":"abstract fun buildHypotheticalDomain(): Domain","description":"explanation.Question.buildHypotheticalDomain","location":"explanation/explanation/-question/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","abstract fun buildHypotheticalDomain(): Domain","explanation.Question.buildHypotheticalDomain"]},{"name":"abstract fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.Question.buildHypotheticalProblem","location":"explanation/explanation/-question/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","abstract fun buildHypotheticalProblem(): Sequence<Problem>","explanation.Question.buildHypotheticalProblem"]},{"name":"abstract fun explain(question: Question): Explanation","description":"explanation.Explainer.explain","location":"explanation/explanation/-explainer/explain.html","searchKeys":["explain","abstract fun explain(question: Question): Explanation","explanation.Explainer.explain"]},{"name":"abstract fun isPlanLengthAcceptable(): Boolean","description":"explanation.Explanation.isPlanLengthAcceptable","location":"explanation/explanation/-explanation/is-plan-length-acceptable.html","searchKeys":["isPlanLengthAcceptable","abstract fun isPlanLengthAcceptable(): Boolean","explanation.Explanation.isPlanLengthAcceptable"]},{"name":"abstract fun isPlanValid(): Boolean","description":"explanation.Explanation.isPlanValid","location":"explanation/explanation/-explanation/is-plan-valid.html","searchKeys":["isPlanValid","abstract fun isPlanValid(): Boolean","explanation.Explanation.isPlanValid"]},{"name":"abstract fun isProblemSolvable(): Boolean","description":"explanation.Explanation.isProblemSolvable","location":"explanation/explanation/-explanation/is-problem-solvable.html","searchKeys":["isProblemSolvable","abstract fun isProblemSolvable(): Boolean","explanation.Explanation.isProblemSolvable"]},{"name":"abstract fun minimalPlanSelector(problem: Problem): Plan","description":"explanation.Explainer.minimalPlanSelector","location":"explanation/explanation/-explainer/minimal-plan-selector.html","searchKeys":["minimalPlanSelector","abstract fun minimalPlanSelector(problem: Problem): Plan","explanation.Explainer.minimalPlanSelector"]},{"name":"abstract fun minimalSolutionLength(): Int","description":"explanation.Explanation.minimalSolutionLength","location":"explanation/explanation/-explanation/minimal-solution-length.html","searchKeys":["minimalSolutionLength","abstract fun minimalSolutionLength(): Int","explanation.Explanation.minimalSolutionLength"]},{"name":"abstract fun present(): String","description":"explanation.ExplanationPresenter.present","location":"explanation/explanation/-explanation-presenter/present.html","searchKeys":["present","abstract fun present(): String","explanation.ExplanationPresenter.present"]},{"name":"abstract fun presentContrastiveExplanation(): String","description":"explanation.ContrastiveExplanationPresenter.presentContrastiveExplanation","location":"explanation/explanation/-contrastive-explanation-presenter/present-contrastive-explanation.html","searchKeys":["presentContrastiveExplanation","abstract fun presentContrastiveExplanation(): String","explanation.ContrastiveExplanationPresenter.presentContrastiveExplanation"]},{"name":"abstract fun presentMinimalExplanation(): String","description":"explanation.ExplanationPresenter.presentMinimalExplanation","location":"explanation/explanation/-explanation-presenter/present-minimal-explanation.html","searchKeys":["presentMinimalExplanation","abstract fun presentMinimalExplanation(): String","explanation.ExplanationPresenter.presentMinimalExplanation"]},{"name":"abstract fun simulate(plan: Plan, state: State): List<State>","description":"explanation.Simulator.simulate","location":"explanation/explanation/-simulator/simulate.html","searchKeys":["simulate","abstract fun simulate(plan: Plan, state: State): List<State>","explanation.Simulator.simulate"]},{"name":"abstract val addedList: List<Operator>","description":"explanation.Explanation.addedList","location":"explanation/explanation/-explanation/added-list.html","searchKeys":["addedList","abstract val addedList: List<Operator>","explanation.Explanation.addedList"]},{"name":"abstract val deletedList: List<Operator>","description":"explanation.Explanation.deletedList","location":"explanation/explanation/-explanation/deleted-list.html","searchKeys":["deletedList","abstract val deletedList: List<Operator>","explanation.Explanation.deletedList"]},{"name":"abstract val explainer: Explainer","description":"explanation.Explanation.explainer","location":"explanation/explanation/-explanation/explainer.html","searchKeys":["explainer","abstract val explainer: Explainer","explanation.Explanation.explainer"]},{"name":"abstract val explanation: Explanation","description":"explanation.ExplanationPresenter.explanation","location":"explanation/explanation/-explanation-presenter/explanation.html","searchKeys":["explanation","abstract val explanation: Explanation","explanation.ExplanationPresenter.explanation"]},{"name":"abstract val focus: Operator","description":"explanation.Question.focus","location":"explanation/explanation/-question/focus.html","searchKeys":["focus","abstract val focus: Operator","explanation.Question.focus"]},{"name":"abstract val focusOn: Int","description":"explanation.Question.focusOn","location":"explanation/explanation/-question/focus-on.html","searchKeys":["focusOn","abstract val focusOn: Int","explanation.Question.focusOn"]},{"name":"abstract val novelPlan: Plan","description":"explanation.Explanation.novelPlan","location":"explanation/explanation/-explanation/novel-plan.html","searchKeys":["novelPlan","abstract val novelPlan: Plan","explanation.Explanation.novelPlan"]},{"name":"abstract val originalPlan: Plan","description":"explanation.Explanation.originalPlan","location":"explanation/explanation/-explanation/original-plan.html","searchKeys":["originalPlan","abstract val originalPlan: Plan","explanation.Explanation.originalPlan"]},{"name":"abstract val plan: Plan","description":"explanation.Question.plan","location":"explanation/explanation/-question/plan.html","searchKeys":["plan","abstract val plan: Plan","explanation.Question.plan"]},{"name":"abstract val planner: Planner","description":"explanation.Explainer.planner","location":"explanation/explanation/-explainer/planner.html","searchKeys":["planner","abstract val planner: Planner","explanation.Explainer.planner"]},{"name":"abstract val problem: Problem","description":"explanation.Question.problem","location":"explanation/explanation/-question/problem.html","searchKeys":["problem","abstract val problem: Problem","explanation.Question.problem"]},{"name":"abstract val question: Question","description":"explanation.Explanation.question","location":"explanation/explanation/-explanation/question.html","searchKeys":["question","abstract val question: Question","explanation.Explanation.question"]},{"name":"abstract val sharedList: List<Operator>","description":"explanation.Explanation.sharedList","location":"explanation/explanation/-explanation/shared-list.html","searchKeys":["sharedList","abstract val sharedList: List<Operator>","explanation.Explanation.sharedList"]},{"name":"class QuestionAddOperator(val problem: Problem, val plan: Plan, val focus: Operator, val focusOn: Int) : BaseQuestion","description":"explanation.impl.QuestionAddOperator","location":"explanation/explanation.impl/-question-add-operator/index.html","searchKeys":["QuestionAddOperator","class QuestionAddOperator(val problem: Problem, val plan: Plan, val focus: Operator, val focusOn: Int) : BaseQuestion","explanation.impl.QuestionAddOperator"]},{"name":"class QuestionPlanProposal(val problem: Problem, val plan: Plan, val alternativePlan: Plan) : BaseQuestion","description":"explanation.impl.QuestionPlanProposal","location":"explanation/explanation.impl/-question-plan-proposal/index.html","searchKeys":["QuestionPlanProposal","class QuestionPlanProposal(val problem: Problem, val plan: Plan, val alternativePlan: Plan) : BaseQuestion","explanation.impl.QuestionPlanProposal"]},{"name":"class QuestionPlanSatisfiability(val problem: Problem, val plan: Plan) : BaseQuestion","description":"explanation.impl.QuestionPlanSatisfiability","location":"explanation/explanation.impl/-question-plan-satisfiability/index.html","searchKeys":["QuestionPlanSatisfiability","class QuestionPlanSatisfiability(val problem: Problem, val plan: Plan) : BaseQuestion","explanation.impl.QuestionPlanSatisfiability"]},{"name":"class QuestionRemoveOperator(val problem: Problem, val plan: Plan, val focus: Operator) : BaseQuestion","description":"explanation.impl.QuestionRemoveOperator","location":"explanation/explanation.impl/-question-remove-operator/index.html","searchKeys":["QuestionRemoveOperator","class QuestionRemoveOperator(val problem: Problem, val plan: Plan, val focus: Operator) : BaseQuestion","explanation.impl.QuestionRemoveOperator"]},{"name":"class QuestionReplaceOperator(val problem: Problem, val plan: Plan, val focus: Operator, val focusOn: Int, val inState: State? = null) : BaseQuestion","description":"explanation.impl.QuestionReplaceOperator","location":"explanation/explanation.impl/-question-replace-operator/index.html","searchKeys":["QuestionReplaceOperator","class QuestionReplaceOperator(val problem: Problem, val plan: Plan, val focus: Operator, val focusOn: Int, val inState: State? = null) : BaseQuestion","explanation.impl.QuestionReplaceOperator"]},{"name":"fun BaseQuestion()","description":"explanation.impl.BaseQuestion.BaseQuestion","location":"explanation/explanation.impl/-base-question/-base-question.html","searchKeys":["BaseQuestion","fun BaseQuestion()","explanation.impl.BaseQuestion.BaseQuestion"]},{"name":"fun List<Operator>.replaceArtificialOperator(actionList: Set<Action>): List<Operator>","description":"explanation.utils.replaceArtificialOperator","location":"explanation/explanation.utils/replace-artificial-operator.html","searchKeys":["replaceArtificialOperator","fun List<Operator>.replaceArtificialOperator(actionList: Set<Action>): List<Operator>","explanation.utils.replaceArtificialOperator"]},{"name":"fun List<Operator>.retrieveArtificialOperator(): Operator?","description":"explanation.utils.retrieveArtificialOperator","location":"explanation/explanation.utils/retrieve-artificial-operator.html","searchKeys":["retrieveArtificialOperator","fun List<Operator>.retrieveArtificialOperator(): Operator?","explanation.utils.retrieveArtificialOperator"]},{"name":"fun QuestionAddOperator(problem: Problem, plan: Plan, focus: Operator, focusOn: Int)","description":"explanation.impl.QuestionAddOperator.QuestionAddOperator","location":"explanation/explanation.impl/-question-add-operator/-question-add-operator.html","searchKeys":["QuestionAddOperator","fun QuestionAddOperator(problem: Problem, plan: Plan, focus: Operator, focusOn: Int)","explanation.impl.QuestionAddOperator.QuestionAddOperator"]},{"name":"fun QuestionPlanProposal(problem: Problem, plan: Plan, alternativePlan: Plan)","description":"explanation.impl.QuestionPlanProposal.QuestionPlanProposal","location":"explanation/explanation.impl/-question-plan-proposal/-question-plan-proposal.html","searchKeys":["QuestionPlanProposal","fun QuestionPlanProposal(problem: Problem, plan: Plan, alternativePlan: Plan)","explanation.impl.QuestionPlanProposal.QuestionPlanProposal"]},{"name":"fun QuestionPlanSatisfiability(problem: Problem, plan: Plan)","description":"explanation.impl.QuestionPlanSatisfiability.QuestionPlanSatisfiability","location":"explanation/explanation.impl/-question-plan-satisfiability/-question-plan-satisfiability.html","searchKeys":["QuestionPlanSatisfiability","fun QuestionPlanSatisfiability(problem: Problem, plan: Plan)","explanation.impl.QuestionPlanSatisfiability.QuestionPlanSatisfiability"]},{"name":"fun QuestionRemoveOperator(problem: Problem, plan: Plan, focus: Operator)","description":"explanation.impl.QuestionRemoveOperator.QuestionRemoveOperator","location":"explanation/explanation.impl/-question-remove-operator/-question-remove-operator.html","searchKeys":["QuestionRemoveOperator","fun QuestionRemoveOperator(problem: Problem, plan: Plan, focus: Operator)","explanation.impl.QuestionRemoveOperator.QuestionRemoveOperator"]},{"name":"fun QuestionReplaceOperator(problem: Problem, plan: Plan, focus: Operator, focusOn: Int, inState: State? = null)","description":"explanation.impl.QuestionReplaceOperator.QuestionReplaceOperator","location":"explanation/explanation.impl/-question-replace-operator/-question-replace-operator.html","searchKeys":["QuestionReplaceOperator","fun QuestionReplaceOperator(problem: Problem, plan: Plan, focus: Operator, focusOn: Int, inState: State? = null)","explanation.impl.QuestionReplaceOperator.QuestionReplaceOperator"]},{"name":"fun Set<Action>.retrieveAction(operator: Operator): Action","description":"explanation.utils.retrieveAction","location":"explanation/explanation.utils/retrieve-action.html","searchKeys":["retrieveAction","fun Set<Action>.retrieveAction(operator: Operator): Action","explanation.utils.retrieveAction"]},{"name":"fun buildHdomain(domain: Domain, newPredicate: Predicate, newAction: Action): Domain","description":"explanation.impl.BaseQuestion.buildHdomain","location":"explanation/explanation.impl/-base-question/build-hdomain.html","searchKeys":["buildHdomain","fun buildHdomain(domain: Domain, newPredicate: Predicate, newAction: Action): Domain","explanation.impl.BaseQuestion.buildHdomain"]},{"name":"fun buildHproblem(hDomain: Domain, problem: Problem, newFluent: Fluent?, state: State?, updateState: Boolean = false): Problem","description":"explanation.impl.BaseQuestion.buildHproblem","location":"explanation/explanation.impl/-base-question/build-hproblem.html","searchKeys":["buildHproblem","fun buildHproblem(hDomain: Domain, problem: Problem, newFluent: Fluent?, state: State?, updateState: Boolean = false): Problem","explanation.impl.BaseQuestion.buildHproblem"]},{"name":"fun createNewAction(action: Action, fluent: Fluent, negated: Boolean = false): Action","description":"explanation.impl.BaseQuestion.createNewAction","location":"explanation/explanation.impl/-base-question/create-new-action.html","searchKeys":["createNewAction","fun createNewAction(action: Action, fluent: Fluent, negated: Boolean = false): Action","explanation.impl.BaseQuestion.createNewAction"]},{"name":"fun createNewFluent(operator: Operator, predicate: Predicate): Fluent","description":"explanation.impl.BaseQuestion.createNewFluent","location":"explanation/explanation.impl/-base-question/create-new-fluent.html","searchKeys":["createNewFluent","fun createNewFluent(operator: Operator, predicate: Predicate): Fluent","explanation.impl.BaseQuestion.createNewFluent"]},{"name":"fun createNewGroundFluent(operator: Operator, predicate: Predicate): Fluent","description":"explanation.impl.BaseQuestion.createNewGroundFluent","location":"explanation/explanation.impl/-base-question/create-new-ground-fluent.html","searchKeys":["createNewGroundFluent","fun createNewGroundFluent(operator: Operator, predicate: Predicate): Fluent","explanation.impl.BaseQuestion.createNewGroundFluent"]},{"name":"fun createNewPredicate(action: Action, name: String): Predicate","description":"explanation.impl.BaseQuestion.createNewPredicate","location":"explanation/explanation.impl/-base-question/create-new-predicate.html","searchKeys":["createNewPredicate","fun createNewPredicate(action: Action, name: String): Predicate","explanation.impl.BaseQuestion.createNewPredicate"]},{"name":"fun of(): Simulator","description":"explanation.Simulator.Companion.of","location":"explanation/explanation/-simulator/-companion/of.html","searchKeys":["of","fun of(): Simulator","explanation.Simulator.Companion.of"]},{"name":"fun of(explanation: Explanation): ContrastiveExplanationPresenter","description":"explanation.ContrastiveExplanationPresenter.Companion.of","location":"explanation/explanation/-contrastive-explanation-presenter/-companion/of.html","searchKeys":["of","fun of(explanation: Explanation): ContrastiveExplanationPresenter","explanation.ContrastiveExplanationPresenter.Companion.of"]},{"name":"fun of(explanation: Explanation): ExplanationPresenter","description":"explanation.ExplanationPresenter.Companion.of","location":"explanation/explanation/-explanation-presenter/-companion/of.html","searchKeys":["of","fun of(explanation: Explanation): ExplanationPresenter","explanation.ExplanationPresenter.Companion.of"]},{"name":"fun of(planner: Planner): Explainer","description":"explanation.Explainer.Companion.of","location":"explanation/explanation/-explainer/-companion/of.html","searchKeys":["of","fun of(planner: Planner): Explainer","explanation.Explainer.Companion.of"]},{"name":"fun of(question: Question, explainer: Explainer): Explanation","description":"explanation.Explanation.Companion.of","location":"explanation/explanation/-explanation/-companion/of.html","searchKeys":["of","fun of(question: Question, explainer: Explainer): Explanation","explanation.Explanation.Companion.of"]},{"name":"interface ContrastiveExplanationPresenter : ExplanationPresenter","description":"explanation.ContrastiveExplanationPresenter","location":"explanation/explanation/-contrastive-explanation-presenter/index.html","searchKeys":["ContrastiveExplanationPresenter","interface ContrastiveExplanationPresenter : ExplanationPresenter","explanation.ContrastiveExplanationPresenter"]},{"name":"interface Explainer","description":"explanation.Explainer","location":"explanation/explanation/-explainer/index.html","searchKeys":["Explainer","interface Explainer","explanation.Explainer"]},{"name":"interface Explanation","description":"explanation.Explanation","location":"explanation/explanation/-explanation/index.html","searchKeys":["Explanation","interface Explanation","explanation.Explanation"]},{"name":"interface ExplanationPresenter","description":"explanation.ExplanationPresenter","location":"explanation/explanation/-explanation-presenter/index.html","searchKeys":["ExplanationPresenter","interface ExplanationPresenter","explanation.ExplanationPresenter"]},{"name":"interface Question","description":"explanation.Question","location":"explanation/explanation/-question/index.html","searchKeys":["Question","interface Question","explanation.Question"]},{"name":"interface Simulator","description":"explanation.Simulator","location":"explanation/explanation/-simulator/index.html","searchKeys":["Simulator","interface Simulator","explanation.Simulator"]},{"name":"object Companion","description":"explanation.ContrastiveExplanationPresenter.Companion","location":"explanation/explanation/-contrastive-explanation-presenter/-companion/index.html","searchKeys":["Companion","object Companion","explanation.ContrastiveExplanationPresenter.Companion"]},{"name":"object Companion","description":"explanation.Explainer.Companion","location":"explanation/explanation/-explainer/-companion/index.html","searchKeys":["Companion","object Companion","explanation.Explainer.Companion"]},{"name":"object Companion","description":"explanation.Explanation.Companion","location":"explanation/explanation/-explanation/-companion/index.html","searchKeys":["Companion","object Companion","explanation.Explanation.Companion"]},{"name":"object Companion","description":"explanation.ExplanationPresenter.Companion","location":"explanation/explanation/-explanation-presenter/-companion/index.html","searchKeys":["Companion","object Companion","explanation.ExplanationPresenter.Companion"]},{"name":"object Companion","description":"explanation.Simulator.Companion","location":"explanation/explanation/-simulator/-companion/index.html","searchKeys":["Companion","object Companion","explanation.Simulator.Companion"]},{"name":"open override fun buildHypotheticalDomain(): Domain","description":"explanation.impl.QuestionAddOperator.buildHypotheticalDomain","location":"explanation/explanation.impl/-question-add-operator/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","open override fun buildHypotheticalDomain(): Domain","explanation.impl.QuestionAddOperator.buildHypotheticalDomain"]},{"name":"open override fun buildHypotheticalDomain(): Domain","description":"explanation.impl.QuestionPlanProposal.buildHypotheticalDomain","location":"explanation/explanation.impl/-question-plan-proposal/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","open override fun buildHypotheticalDomain(): Domain","explanation.impl.QuestionPlanProposal.buildHypotheticalDomain"]},{"name":"open override fun buildHypotheticalDomain(): Domain","description":"explanation.impl.QuestionPlanSatisfiability.buildHypotheticalDomain","location":"explanation/explanation.impl/-question-plan-satisfiability/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","open override fun buildHypotheticalDomain(): Domain","explanation.impl.QuestionPlanSatisfiability.buildHypotheticalDomain"]},{"name":"open override fun buildHypotheticalDomain(): Domain","description":"explanation.impl.QuestionRemoveOperator.buildHypotheticalDomain","location":"explanation/explanation.impl/-question-remove-operator/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","open override fun buildHypotheticalDomain(): Domain","explanation.impl.QuestionRemoveOperator.buildHypotheticalDomain"]},{"name":"open override fun buildHypotheticalDomain(): Domain","description":"explanation.impl.QuestionReplaceOperator.buildHypotheticalDomain","location":"explanation/explanation.impl/-question-replace-operator/build-hypothetical-domain.html","searchKeys":["buildHypotheticalDomain","open override fun buildHypotheticalDomain(): Domain","explanation.impl.QuestionReplaceOperator.buildHypotheticalDomain"]},{"name":"open override fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.impl.QuestionAddOperator.buildHypotheticalProblem","location":"explanation/explanation.impl/-question-add-operator/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","open override fun buildHypotheticalProblem(): Sequence<Problem>","explanation.impl.QuestionAddOperator.buildHypotheticalProblem"]},{"name":"open override fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.impl.QuestionPlanProposal.buildHypotheticalProblem","location":"explanation/explanation.impl/-question-plan-proposal/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","open override fun buildHypotheticalProblem(): Sequence<Problem>","explanation.impl.QuestionPlanProposal.buildHypotheticalProblem"]},{"name":"open override fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.impl.QuestionPlanSatisfiability.buildHypotheticalProblem","location":"explanation/explanation.impl/-question-plan-satisfiability/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","open override fun buildHypotheticalProblem(): Sequence<Problem>","explanation.impl.QuestionPlanSatisfiability.buildHypotheticalProblem"]},{"name":"open override fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.impl.QuestionRemoveOperator.buildHypotheticalProblem","location":"explanation/explanation.impl/-question-remove-operator/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","open override fun buildHypotheticalProblem(): Sequence<Problem>","explanation.impl.QuestionRemoveOperator.buildHypotheticalProblem"]},{"name":"open override fun buildHypotheticalProblem(): Sequence<Problem>","description":"explanation.impl.QuestionReplaceOperator.buildHypotheticalProblem","location":"explanation/explanation.impl/-question-replace-operator/build-hypothetical-problem.html","searchKeys":["buildHypotheticalProblem","open override fun buildHypotheticalProblem(): Sequence<Problem>","explanation.impl.QuestionReplaceOperator.buildHypotheticalProblem"]},{"name":"open override val focus: Operator","description":"explanation.impl.QuestionAddOperator.focus","location":"explanation/explanation.impl/-question-add-operator/focus.html","searchKeys":["focus","open override val focus: Operator","explanation.impl.QuestionAddOperator.focus"]},{"name":"open override val focus: Operator","description":"explanation.impl.QuestionPlanProposal.focus","location":"explanation/explanation.impl/-question-plan-proposal/focus.html","searchKeys":["focus","open override val focus: Operator","explanation.impl.QuestionPlanProposal.focus"]},{"name":"open override val focus: Operator","description":"explanation.impl.QuestionPlanSatisfiability.focus","location":"explanation/explanation.impl/-question-plan-satisfiability/focus.html","searchKeys":["focus","open override val focus: Operator","explanation.impl.QuestionPlanSatisfiability.focus"]},{"name":"open override val focus: Operator","description":"explanation.impl.QuestionRemoveOperator.focus","location":"explanation/explanation.impl/-question-remove-operator/focus.html","searchKeys":["focus","open override val focus: Operator","explanation.impl.QuestionRemoveOperator.focus"]},{"name":"open override val focus: Operator","description":"explanation.impl.QuestionReplaceOperator.focus","location":"explanation/explanation.impl/-question-replace-operator/focus.html","searchKeys":["focus","open override val focus: Operator","explanation.impl.QuestionReplaceOperator.focus"]},{"name":"open override val focusOn: Int","description":"explanation.impl.QuestionAddOperator.focusOn","location":"explanation/explanation.impl/-question-add-operator/focus-on.html","searchKeys":["focusOn","open override val focusOn: Int","explanation.impl.QuestionAddOperator.focusOn"]},{"name":"open override val focusOn: Int","description":"explanation.impl.QuestionPlanProposal.focusOn","location":"explanation/explanation.impl/-question-plan-proposal/focus-on.html","searchKeys":["focusOn","open override val focusOn: Int","explanation.impl.QuestionPlanProposal.focusOn"]},{"name":"open override val focusOn: Int","description":"explanation.impl.QuestionPlanSatisfiability.focusOn","location":"explanation/explanation.impl/-question-plan-satisfiability/focus-on.html","searchKeys":["focusOn","open override val focusOn: Int","explanation.impl.QuestionPlanSatisfiability.focusOn"]},{"name":"open override val focusOn: Int","description":"explanation.impl.QuestionRemoveOperator.focusOn","location":"explanation/explanation.impl/-question-remove-operator/focus-on.html","searchKeys":["focusOn","open override val focusOn: Int","explanation.impl.QuestionRemoveOperator.focusOn"]},{"name":"open override val focusOn: Int","description":"explanation.impl.QuestionReplaceOperator.focusOn","location":"explanation/explanation.impl/-question-replace-operator/focus-on.html","searchKeys":["focusOn","open override val focusOn: Int","explanation.impl.QuestionReplaceOperator.focusOn"]},{"name":"open override val plan: Plan","description":"explanation.impl.QuestionAddOperator.plan","location":"explanation/explanation.impl/-question-add-operator/plan.html","searchKeys":["plan","open override val plan: Plan","explanation.impl.QuestionAddOperator.plan"]},{"name":"open override val plan: Plan","description":"explanation.impl.QuestionPlanProposal.plan","location":"explanation/explanation.impl/-question-plan-proposal/plan.html","searchKeys":["plan","open override val plan: Plan","explanation.impl.QuestionPlanProposal.plan"]},{"name":"open override val plan: Plan","description":"explanation.impl.QuestionPlanSatisfiability.plan","location":"explanation/explanation.impl/-question-plan-satisfiability/plan.html","searchKeys":["plan","open override val plan: Plan","explanation.impl.QuestionPlanSatisfiability.plan"]},{"name":"open override val plan: Plan","description":"explanation.impl.QuestionRemoveOperator.plan","location":"explanation/explanation.impl/-question-remove-operator/plan.html","searchKeys":["plan","open override val plan: Plan","explanation.impl.QuestionRemoveOperator.plan"]},{"name":"open override val plan: Plan","description":"explanation.impl.QuestionReplaceOperator.plan","location":"explanation/explanation.impl/-question-replace-operator/plan.html","searchKeys":["plan","open override val plan: Plan","explanation.impl.QuestionReplaceOperator.plan"]},{"name":"open override val problem: Problem","description":"explanation.impl.QuestionAddOperator.problem","location":"explanation/explanation.impl/-question-add-operator/problem.html","searchKeys":["problem","open override val problem: Problem","explanation.impl.QuestionAddOperator.problem"]},{"name":"open override val problem: Problem","description":"explanation.impl.QuestionPlanProposal.problem","location":"explanation/explanation.impl/-question-plan-proposal/problem.html","searchKeys":["problem","open override val problem: Problem","explanation.impl.QuestionPlanProposal.problem"]},{"name":"open override val problem: Problem","description":"explanation.impl.QuestionPlanSatisfiability.problem","location":"explanation/explanation.impl/-question-plan-satisfiability/problem.html","searchKeys":["problem","open override val problem: Problem","explanation.impl.QuestionPlanSatisfiability.problem"]},{"name":"open override val problem: Problem","description":"explanation.impl.QuestionRemoveOperator.problem","location":"explanation/explanation.impl/-question-remove-operator/problem.html","searchKeys":["problem","open override val problem: Problem","explanation.impl.QuestionRemoveOperator.problem"]},{"name":"open override val problem: Problem","description":"explanation.impl.QuestionReplaceOperator.problem","location":"explanation/explanation.impl/-question-replace-operator/problem.html","searchKeys":["problem","open override val problem: Problem","explanation.impl.QuestionReplaceOperator.problem"]},{"name":"protected open override var hDomain: Domain","description":"explanation.impl.QuestionReplaceOperator.hDomain","location":"explanation/explanation.impl/-question-replace-operator/h-domain.html","searchKeys":["hDomain","protected open override var hDomain: Domain","explanation.impl.QuestionReplaceOperator.hDomain"]},{"name":"protected open override var newGroundFluent: Fluent","description":"explanation.impl.QuestionRemoveOperator.newGroundFluent","location":"explanation/explanation.impl/-question-remove-operator/new-ground-fluent.html","searchKeys":["newGroundFluent","protected open override var newGroundFluent: Fluent","explanation.impl.QuestionRemoveOperator.newGroundFluent"]},{"name":"val alternativePlan: Plan","description":"explanation.impl.QuestionPlanProposal.alternativePlan","location":"explanation/explanation.impl/-question-plan-proposal/alternative-plan.html","searchKeys":["alternativePlan","val alternativePlan: Plan","explanation.impl.QuestionPlanProposal.alternativePlan"]},{"name":"val inState: State? = null","description":"explanation.impl.QuestionReplaceOperator.inState","location":"explanation/explanation.impl/-question-replace-operator/in-state.html","searchKeys":["inState","val inState: State? = null","explanation.impl.QuestionReplaceOperator.inState"]}]
